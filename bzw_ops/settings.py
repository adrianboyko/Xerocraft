"""
Django settings for BzwOps project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import uuid
import sys

TESTING = 'test' in sys.argv or 'jenkins' in sys.argv

DEVHOSTS = [
    238402988951122,  # Adrian Linux (Pavillion)
    220083055528387,  # Adrian Mac
    149885691750610,  # Adrian Linux (EliteDesk)
]
CURRHOST = uuid.getnode()
ISDEVHOST = CURRHOST in DEVHOSTS

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    # List static files outside of apps, here.
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Storage for uploads from users
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_STORAGE_BUCKET_NAME = os.environ['AWS_S3_BUCKET_NAME']
AWS_QUERYSTRING_AUTH = False
AWS_HEADERS = {'Cache-Control': 'max-age=86400'}


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['XEROPS_DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if ISDEVHOST else False

ADMINS = [('Adrian', 'adrian@xerocraft.org')]
SERVER_EMAIL = 'xis+error@xerocraft.org'  # Django only uses this for error email.

ALLOWED_HOSTS = (
    'xerocraft-django.herokuapp.com',
    'xis.xerocraft.us',
    'xis-test.herokuapp.com'
)
if ISDEVHOST:
    ALLOWED_HOSTS += (
        '192.168.1.122',
        '127.0.0.1',
        'localhost',
    )

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

if not TESTING:
    SECURE_SSL_REDIRECT = True

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ['GOOGLE_OAUTH2_KEY']
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ['GOOGLE_OAUTH2_SECRET']

# SOCIAL_AUTH_TWITTER_KEY = os.environ['TWITTER_KEY']
# SOCIAL_AUTH_TWITTER_SECRET = os.environ['TWITTER_SECRET']

# SOCIAL_AUTH_FACEBOOK_KEY =  os.environ['FACEBOOK_KEY']
# SOCIAL_AUTH_FACEBOOK_SECRET =  os.environ['FACEBOOK_SECRET']

# Application definition
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Req'd by helpdesk. Will keep, even though helpdesk is being removed.
    'storages',  # For uploads from users, as in helpdesk and possibly other apps.
)

if ISDEVHOST:
    # Django-Jenkins docs say to list it as soon as possible after django modules,
    # So I'm putting all the development and WIP stuff here.
    INSTALLED_APPS += (
        'django_jenkins',
        'django_extensions',
        #'debug_toolbar',
    )

INSTALLED_APPS += (
    'django_object_actions',
    'abutils',
    'bzw_ops',
    'xis',
    'members',
    'tasks',
    'inventory',
    'soda',
    'crispy_forms',
    'rest_framework',
    'rest_framework.authtoken',
    'books',
    'kmkr',
    'reversion',
    'modelmailer',
    'django_filters',
)

SITE_ID = 1  # For django.contrib.sites

MIDDLEWARE = (
    'reversion.middleware.RevisionMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',  # The SessionAuthenticationMiddleware class is removed. It provided no functionality since session authentication is unconditionally enabled in Django 1.10.
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
)

if DEBUG:
    MIDDLEWARE += (
        #'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    INTERNAL_IPS = ('127.0.0.1', '192.168.0.101',)

SESSION_COOKIE_AGE = 10*60
SESSION_SECURITY_WARN_AFTER = 9*60
SESSION_SAVE_EVERY_REQUEST = True


AUTHENTICATION_BACKENDS = (
    'bzw_ops.authenticators.CaseInsensitiveModelBackend',
    'xis.authenticators.XerocraftBackend',
    # 'social.backends.facebook.FacebookOAuth2',
    # 'social.backends.google.GoogleOAuth2',
    # 'social.backends.twitter.TwitterOAuth',
)
if ISDEVHOST:
    AUTHENTICATION_BACKENDS += (
    )

ANONYMOUS_USER_ID = -1

ROOT_URLCONF = 'bzw_ops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'bzw_ops/templates'),
            os.path.join(BASE_DIR, 'tasks/templates/'),
            os.path.join(BASE_DIR, 'members/templates/'),
            os.path.join(BASE_DIR, 'inventory/templates/'),
            os.path.join(BASE_DIR, 'soda/templates/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #'django.core.context_processors.request', Removed in 1.10 per http://stackoverflow.com/a/38907086/2037738
                # 'social.apps.django_app.context_processors.backends',
                # 'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'bzw_ops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # or django.db.backends.mysql
        'NAME': os.environ['XEROPS_DB_NAME'],
        'USER': os.environ['XEROPS_DB_USER'],
        'PASSWORD': os.environ['XEROPS_DB_PW'],
        'HOST': os.environ['XEROPS_DB_HOST'],
        'PORT': os.environ['XEROPS_DB_PORT']
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Arizona'

USE_I18N = True

USE_L10N = True

USE_TZ = True

from django.conf.locale.en import formats as en_formats
en_formats.DATETIME_FORMAT = "m/d/y H:i:s"
en_formats.DATE_FORMAT = "m/d/y"


# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = "sparkpost.django.email_backend.SparkPostEmailBackend"
SPARKPOST_API_KEY = os.environ['SPARKPOST_API_KEY']
DEFAULT_FROM_EMAIL = "Xerocraft Systems <xis@xerocraft.org>"
SPARKPOST_OPTIONS = {
    'track_opens': False,
    'track_clicks': False,
    'transactional': True,
}

# Per http://stackoverflow.com/questions/18920428/django-logging-on-heroku

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'pathname=%(pathname)s lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'kiosk': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'bzw_ops': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'books': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'helpdesk': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'kmkr': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'members': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'modelmailer': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'soda': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'tasks': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'xis': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser'
    ],

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        #'rest_framework.filters.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ],

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        #'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    'DEFAULT_THROTTLE_RATES': {
        'anon': '15/minute',
        'user': '15/minute'
    },

    'PAGE_SIZE': 100,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
    }
}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# JENKINS

PROJECT_APPS = (
    'abutils',
    'books',
    'inventory',
    'members',
    'modelmailer',
    'soda',
    'tasks',
    'bzw_ops',
    'xis',
)

JENKINS_TASKS = (
    # 'django_jenkins.tasks.run_pep8',
    'django_jenkins.tasks.run_pylint',
    'django_jenkins.tasks.run_pyflakes',
    # 'django_jenkins.tasks.run_jslint',
    # 'django_jenkins.tasks.run_csslint',
    # 'django_jenkins.tasks.run_sloccount'
)

PYLINT_LOAD_PLUGIN = (
    'pylint_django',
)

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# BzwOps Config
#
# Using "BzwOps" as a generic non-Xerocraft-specific name for the project.
# The system is called "Xerocraft Internal Systems" (XIS) at Xerocraft.
#
# Configuration of BzwOps for Xerocraft follows. Change for your organization.

BZWOPS_SYS_NAME = "XIS"

BZWOPS_ORG_NAME = "Xerocraft"
BZWOPS_ORG_NAME_POSSESSIVE = "Xerocraft's"

# Set the BZWOPS_FACILITY_PUBLIC_IP environment variable to either:
#   (1) A DNS name that resolves to the facility's public IP
#   (2) The facility's static IP address.
BZWOPS_FACILITY_PUBLIC_IP = os.getenv('XEROPS_FACILITY_PUBLIC_IP', None)


# TODO: Switch to the following format for BzwOps config?
# These are settings that can be used by any of the BzwOps apps.
# This information is not yet used by the apps.
BZWOPS_CONFIG = {

    # The name people will use to refer to your BzwOps instance:
    'SYS_NAME': "XIS",

    # The name of the organization that your BzwOps instance serves:
    'ORG_NAME': "Xerocraft",
    'ORG_NAME_POSSESSIVE': "Xerocraft's",

    # Set the BZWOPS_FACILITY_PUBLIC_IP environment variable to either:
    # (1) A DNS name that resolves to the facility's public IP
    # (2) The facility's static IP address.
    'FACILITY_PUBLIC_IP': os.getenv('XEROPS_FACILITY_PUBLIC_IP', None),

    # Email addresses
    'EMAIL_ARCHIVE': "Xerocraft Internal Systems <xis@xerocraft.org>",
    'EMAIL_BZWOPS': "Xerocraft Internal Systems <xis@xerocraft.org>",
    'EMAIL_TREASURER': "Xerocraft Treasurer <treasurer@xerocraft.org>",
    'EMAIL_VOLUNTEER': "Volunteer Coordinator <volunteer@xerocraft.org>",
    'EMAIL_STAFF_LIST': "Staff List <xerocraft-staff@xerocraft.org>",
}

BZWOPS_MEMBERS_CONFIG = {
    # Configuration specific to the "members" app.
}

BZWOPS_TASKS_CONFIG = {
    # Configuration specific to the "tasks" app.
    'USER_VOLUNTEER': "adrianb"  # The Volunteer Coordinator's username.
}

BZWOPS_INVENTORY_CONFIG = {
    # Configuration specific to the "inventory" app.
}

BZWOPS_BOOKS_CONFIG = {
    # Configuration specific to the "books" app.
    'SQUAREUP_LOCATION_ID': os.getenv('SQUAREUP_LOCATION_ID', None),
    'SQUAREUP_APIV1_TOKEN': os.getenv('SQUAREUP_APIV1_TOKEN', None),
}

BZWOPS_SODA_CONFIG = {
    # Configuration specific to the "soda" app.
    'MQTT_SERVER': os.getenv('CLOUDMQTT_SERVER',None),
    'MQTT_PORT': os.getenv('CLOUDMQTT_PORT', None),
    'MQTT_USER': os.getenv('CLOUDMQTT_USER', None),
    'MQTT_PW': os.getenv('CLOUDMQTT_PW', None),
    'MQTT_TOPIC': "xerocraft/soda/vend"
}
